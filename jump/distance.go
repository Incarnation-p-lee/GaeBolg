package main

import "fmt"

var distancePerMs float64 = 0.67139
var distanceRange int = 1

var distanceTable []int = []int{
	122: 240, 156: 275, 159: 290,
	163: 295, 165: 300, 166: 302, 170: 304, 172: 315, 175: 300,
	186: 320, 189: 326, 203: 340, 206: 342,
	212: 344, 215: 346, 217: 356, 223: 368,
	230: 354,
	235: 360, 238: 380,
	249: 370, 251: 375, 252: 394, 254: 398, 257: 408, 260: 420, 263: 426,
	266: 410,
	271: 420, 273: 423,
	274: 418, 276: 420, 278: 426, 295: 470,
	281: 438, 282: 440, 283: 444, 284: 446, 288: 468,
	298: 474, 299: 478,
	301: 495, 305: 486,
	306: 487, 307: 488, 309: 489, 312: 493, 314: 495,
	316: 497, 317: 498, 318: 499,
	325: 514, 326: 516, 328: 520,
	327: 548,
	337: 544,
	339: 540, 342: 536,
	344: 545, 347: 550,
	353: 552, 356: 556, 357: 558, 360: 562, 365: 562, 369: 580,
	370: 584, 371: 588, 373: 589, 376: 590, 380: 595, 387: 599, 389: 600,
	393: 604, 395: 608, 397: 620,
	407: 628, 409: 630, 411: 630, 414: 636,
	419: 640,
	421: 644, 424: 648, 434: 654, 437: 690, 442: 650, 447: 651, 456: 690,
	459: 675, 460: 690,
	464: 680, 465: 686, 472: 730,
	479: 706, 483: 710, 484: 712, 486: 720, 487: 700,
	488: 702, 489: 724,
	491: 745, 492: 746, 493: 746, 495: 748,
	496: 715, 497: 720, 498: 722, 501: 726, 505: 730, 508: 740, 509: 744,
	511: 750, 513: 760, 516: 764, 519: 766,
	520: 774, 521: 776,
	525: 786, 531: 770, 537: 810, 541: 796, 543: 816,
	546: 814,
	551: 815,
	559: 830, 562: 830, 563: 832, 570: 834,
	572: 808, 573: 810, 582: 848, 589: 844,
	591: 850, 592: 860, 594: 860, 595: 846, 596: 856,
	601: 860, 602: 882, 604: 860, 607: 872,
	610: 868, 611: 884, 612: 886, 617: 888, 624: 898, 626: 904,
	633: 905, 634: 910, 639: 915, 640: 920,
	643: 932, 644: 936, 645: 940,
	648: 945, 654: 950, 658: 960,
	663: 958, 666: 960, 668: 940, 670: 970, 675: 975,
	680: 990, 682: 996,
	684: 964,
	687: 986, 688: 990, 691: 993, 694: 998, 696: 1004,
	702: 990, 703: 994, 754: 1040, 772: 1050,
	999: 0,
}

func distanceToPressTime(distance int) int {
	t := distanceTable[distance]

	if t != 0 {
		fmt.Println(">> Distance shortcut <<")
		return t
	}

	start, end := (distance - distanceRange), (distance + distanceRange)

	for i := start; i <= end; i++ {
		t = distanceTable[i]
		if t != 0 {
			fmt.Println(">> Distance neighbor shortcut <<")
			return t
		}
	}

	ms := float64(distance) / distancePerMs

	if distance < 200 {
		ms += 75
	} else if distance > 700 {
		ms -= 50
	}

	return int(ms)
}
